{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AkshayB1911/Optimization-PS/blob/main/finalnotebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1eXOMikLFkBd",
        "outputId": "cc3358ec-721d-4ce0-d83a-dd342c8061ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting gurobipy\n",
            "  Downloading gurobipy-12.0.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (16 kB)\n",
            "Downloading gurobipy-12.0.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (14.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.4/14.4 MB\u001b[0m \u001b[31m36.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: gurobipy\n",
            "Successfully installed gurobipy-12.0.1\n"
          ]
        }
      ],
      "source": [
        "!pip install gurobipy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "YGxO-kVXGqGy"
      },
      "outputs": [],
      "source": [
        "import gurobipy as gp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lMgLPX2KGtCM",
        "outputId": "fc1e0fa3-e2a5-4740-8c8f-a5a43930920f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter WLSAccessID\n",
            "Set parameter WLSSecret\n",
            "Set parameter LicenseID to value 2616884\n",
            "Academic license 2616884 - for non-commercial use only - registered to ak___@iitg.ac.in\n"
          ]
        }
      ],
      "source": [
        "params={\n",
        "    \"WLSACCESSID\":'56123837-1b14-432c-b974-a9bb029df73e',\n",
        "    \"WLSSECRET\":'ee7e4faf-676f-472b-b2f8-a196087f18d5',\n",
        "    \"LICENSEID\":2616884\n",
        "}\n",
        "env=gp.Env(params=params)\n",
        "\n",
        "model=gp.Model(env=env)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dYxUuaVQHJZU"
      },
      "outputs": [],
      "source": [
        "from gurobipy import GRB"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "gCA3u_vgHhFM"
      },
      "outputs": [],
      "source": [
        "n=4\n",
        "\n",
        "crystals=[[10,20,100],[40,50,150],[25,35,200],[50,50,300]]\n",
        "m=3\n",
        "mines=[[15,25,50],[70,60,75],[30,200,60]]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwR8GG_VQ3QJ",
        "outputId": "cbfd72e5-285d-4dc4-dc2c-1d45df76c607"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Set parameter WLSAccessID\n",
            "Set parameter WLSSecret\n",
            "Set parameter LicenseID to value 2616884\n",
            "Academic license 2616884 - for non-commercial use only - registered to ak___@iitg.ac.in\n",
            "Set parameter MIPFocus to value 1\n",
            "Set parameter NumericFocus to value 3\n",
            "Warning: zero or small (< 1e-13) coefficients in quadratic constraints, ignored\n",
            "Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: AMD EPYC 7B12, instruction set [SSE2|AVX|AVX2]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 2 threads\n",
            "\n",
            "Non-default parameters:\n",
            "MIPFocus  1\n",
            "NumericFocus  3\n",
            "\n",
            "Academic license 2616884 - for non-commercial use only - registered to ak___@iitg.ac.in\n",
            "Optimize a model with 104 rows, 257 columns and 456 nonzeros\n",
            "Model fingerprint: 0x5d24a562\n",
            "Model has 112 quadratic constraints\n",
            "Model has 162 simple general constraints\n",
            "  36 MAX, 36 MIN, 90 INDICATOR\n",
            "Variable types: 88 continuous, 169 integer (151 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+00, 1e+05]\n",
            "  QMatrix range    [1e+00, 1e+00]\n",
            "  QLMatrix range   [1e+01, 1e+05]\n",
            "  Objective range  [5e+01, 3e+02]\n",
            "  Bounds range     [1e+00, 1e+04]\n",
            "  RHS range        [1e+00, 2e+05]\n",
            "  QRHS range       [1e+05, 1e+05]\n",
            "  GenCon rhs range [1e-05, 1e+00]\n",
            "  GenCon coe range [1e+00, 1e+00]\n",
            "Presolve added 382 rows and 324 columns\n",
            "Presolve time: 0.01s\n",
            "Presolved: 566 rows, 598 columns, 1938 nonzeros\n",
            "Presolved model has 216 SOS constraint(s)\n",
            "Presolved model has 16 bilinear constraint(s)\n",
            "\n",
            "Solving non-convex MIQCP\n",
            "\n",
            "Variable types: 337 continuous, 261 integer (261 binary)\n",
            "\n",
            "Root relaxation: objective 7.500000e+02, 291 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0  750.00000    0   53          -  750.00000      -     -    0s\n",
            "H    0     0                      -0.0000000  750.00000      -     -    0s\n",
            "     0     2  750.00000    0   53   -0.00000  750.00000      -     -    0s\n",
            "H  130   118                     100.0000000  750.00000   650%   7.5    0s\n",
            "H  208   170                     300.0000000  750.00000   150%   7.3    0s\n",
            "H  260   212                     550.0000000  750.00000  36.4%   8.0    0s\n",
            "H  500     7                     750.0000000  750.00000  0.00%   8.2    0s\n",
            "\n",
            "Explored 501 nodes (4660 simplex iterations) in 0.57 seconds (0.35 work units)\n",
            "Thread count was 2 (of 2 available processors)\n",
            "\n",
            "Solution count 5: 750 550 300 ... -0\n",
            "\n",
            "Optimal solution found (tolerance 1.00e-04)\n",
            "Warning: max constraint violation (1.0000e-05) exceeds tolerance\n",
            "Warning: max general constraint violation (1.0000e-05) exceeds tolerance\n",
            "Best objective 7.500000000000e+02, best bound 7.500000000000e+02, gap 0.0000%\n",
            "\n",
            "Optimal Polygon Vertex Coordinates:\n",
            " Vertex 0: (x = 0.0, y = 50.99413793467942)\n",
            " Vertex 1: (x = 0.0, y = 0.0)\n",
            " Vertex 2: (x = 5.0, y = 0.0)\n",
            " Vertex 3: (x = 5.0, y = 50.0)\n",
            " Vertex 4: (x = 10.0, y = 50.0)\n",
            " Vertex 5: (x = 10.0, y = 0.0)\n",
            " Vertex 6: (x = 25.0, y = 0.0)\n",
            " Vertex 7: (x = 25.0, y = 50.99413793467942)\n",
            "\n",
            "Total Score = 750.0\n"
          ]
        }
      ],
      "source": [
        "import gurobipy as gp\n",
        "from gurobipy import GRB\n",
        "\n",
        "# ========================================================\n",
        "# Data\n",
        "# ========================================================\n",
        "# Points: each is [x, y, value]\n",
        "crystals = [\n",
        "    [10, 20, 100],\n",
        "    [40, 50, 150],\n",
        "    [25, 35, 200],\n",
        "    [50, 50, 300]\n",
        "]\n",
        "mines = [\n",
        "    [15, 25, 50],\n",
        "    [70, 60, 75],\n",
        "    [30, 200, 60]\n",
        "]\n",
        "n_crystals = len(crystals)\n",
        "n_mines = len(mines)\n",
        "\n",
        "# ========================================================\n",
        "# Model Parameters\n",
        "# ========================================================\n",
        "n_vertices = 8             # Reduced number of vertices for better convergence\n",
        "big_M = 100000            # Increased Big-M constant\n",
        "M_sep = 100000            # Increased separation constant\n",
        "delta = 5.0               # Reduced minimum edge length\n",
        "epsilon_convex = 1e-6     # Reduced epsilon for numerical stability\n",
        "\n",
        "# Calculate center point based on data points\n",
        "center_x = sum(p[0] for p in crystals + mines) / (n_crystals + n_mines)\n",
        "center_y = sum(p[1] for p in crystals + mines) / (n_crystals + n_mines)\n",
        "\n",
        "# ========================================================\n",
        "# Create the Model\n",
        "# ========================================================\n",
        "params={\n",
        "    \"WLSACCESSID\":'56123837-1b14-432c-b974-a9bb029df73e',\n",
        "    \"WLSSECRET\":'ee7e4faf-676f-472b-b2f8-a196087f18d5',\n",
        "    \"LICENSEID\":2616884\n",
        "}\n",
        "env=gp.Env(params=params)\n",
        "model=gp.Model(env=env)\n",
        "\n",
        "epsilon=1e-5\n",
        "\n",
        "# Add MIPFocus parameter to emphasize finding feasible solutions\n",
        "model.setParam('MIPFocus', 1)\n",
        "model.setParam('NumericFocus', 3)  # Increase numeric focus for better stability\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (A) Polygon Variables\n",
        "# --------------------------------------------------\n",
        "# Vertex coordinates (continuous)\n",
        "x = model.addVars(n_vertices, lb=0, ub=10000.0, name=\"x\")\n",
        "y = model.addVars(n_vertices, lb=0, ub=10000.0, name=\"y\")\n",
        "\n",
        "# Binary variables for edge orientation\n",
        "b = model.addVars(n_vertices, vtype=GRB.BINARY, name=\"b\")\n",
        "d = model.addVars(n_vertices, vtype=GRB.BINARY, name=\"d\")\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (B) Enforce Alternating Edge Orientation\n",
        "# --------------------------------------------------\n",
        "for i in range(n_vertices):\n",
        "    model.addConstr(b[i] + b[(i+1) % n_vertices] == 1, name=f\"alternating_{i}\")\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (C) Edge Non-Degeneracy and Minimum Length Constraints\n",
        "# --------------------------------------------------\n",
        "for i in range(n_vertices):\n",
        "    i_next = (i + 1) % n_vertices\n",
        "\n",
        "    # Horizontal/vertical constraints\n",
        "    model.addConstr(y[i] - y[i_next] <= big_M * (1 - b[i]), name=f\"hor_y_upper_{i}\")\n",
        "    model.addConstr(y[i] - y[i_next] >= -big_M * (1 - b[i]), name=f\"hor_y_lower_{i}\")\n",
        "    model.addConstr(x[i] - x[i_next] <= big_M * b[i], name=f\"ver_x_upper_{i}\")\n",
        "    model.addConstr(x[i] - x[i_next] >= -big_M * b[i], name=f\"ver_x_lower_{i}\")\n",
        "\n",
        "    # Minimum length constraints with direction\n",
        "    model.addConstr(x[i_next] - x[i] >= delta - big_M*(1 - d[i]) - big_M*(1 - b[i]))\n",
        "    model.addConstr(x[i] - x[i_next] >= delta - big_M*d[i] - big_M*(1 - b[i]))\n",
        "    model.addConstr(y[i_next] - y[i] >= delta - big_M*(1 - d[i]) - big_M*b[i])\n",
        "    model.addConstr(y[i] - y[i_next] >= delta - big_M*d[i] - big_M*b[i])\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (D) Non-Intersection Constraints\n",
        "# --------------------------------------------------\n",
        "M=1e6\n",
        "for i in range(n_vertices):\n",
        "  for j in range(i+2,n_vertices):\n",
        "    if((i%2)!=(j%2)):\n",
        "      i_next=(i+1)%n_vertices\n",
        "      j_next=(j+1)%n_vertices\n",
        "\n",
        "      # When b==1, enforce constraint1\n",
        "\n",
        "      #b==1 indicates that i edge is horizontal constraint 1\n",
        "      i_hor_sum = model.addVar(vtype=GRB.INTEGER,name=f\"i_hor_sum{i}_{j}\")\n",
        "\n",
        "      xi_hor_min=model.addVar()\n",
        "      xi_hor_max=model.addVar()\n",
        "      model.addGenConstrMin(xi_hor_min, [x[i], x[i_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(xi_hor_max, [x[i], x[i_next]], name=\"max_constraint\")\n",
        "\n",
        "      yj_ver_min=model.addVar()\n",
        "      yj_ver_max=model.addVar()\n",
        "      model.addGenConstrMin(yj_ver_min, [y[j], y[j_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(yj_ver_max, [y[j], y[j_next]], name=\"max_constraint\")\n",
        "\n",
        "      hor1=model.addVar(vtype=GRB.BINARY)\n",
        "      hor2=model.addVar(vtype=GRB.BINARY)\n",
        "      hor3=model.addVar(vtype=GRB.BINARY)\n",
        "      hor4=model.addVar(vtype=GRB.BINARY)\n",
        "\n",
        "      model.addGenConstrIndicator(hor1,1,x[j]>=epsilon+xi_hor_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor2,1,x[j]<=xi_hor_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor3,1,y[i]>=epsilon+yj_ver_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor4,1,y[i]<=yj_ver_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "      model.addConstr(i_hor_sum==hor1+hor2+hor3+hor4)\n",
        "\n",
        "      model.addGenConstrIndicator(b[i],1,i_hor_sum>=1, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "      i_ver_sum = model.addVar(vtype=GRB.INTEGER,name=f\"i_hor_sum{i}_{j}\")\n",
        "\n",
        "      yi_ver_min=model.addVar()\n",
        "      yi_ver_max=model.addVar()\n",
        "      model.addGenConstrMin(yi_ver_min, [y[i], y[i_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(yi_ver_max, [y[i], y[i_next]], name=\"max_constraint\")\n",
        "\n",
        "      xj_hor_min=model.addVar()\n",
        "      xj_hor_max=model.addVar()\n",
        "      model.addGenConstrMin(xj_hor_min, [x[j], x[j_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(xj_hor_max, [x[j], x[j_next]], name=\"max_constraint\")\n",
        "\n",
        "      ver1=model.addVar(vtype=GRB.BINARY)\n",
        "      ver2=model.addVar(vtype=GRB.BINARY)\n",
        "      ver3=model.addVar(vtype=GRB.BINARY)\n",
        "      ver4=model.addVar(vtype=GRB.BINARY)\n",
        "\n",
        "      model.addGenConstrIndicator(ver1,1,x[i]<=xj_hor_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver2,1,x[i]>=epsilon+xj_hor_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver3,1,y[j]>=epsilon+yi_ver_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver4,1,y[j]<=yi_ver_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "      model.addConstr(i_ver_sum==ver1+ver2+ver3+ver4)\n",
        "      model.addGenConstrIndicator(b[i],0,i_ver_sum>=1, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (E) Point-Inclusion Constraints (Cross Product Method)\n",
        "# --------------------------------------------------\n",
        "inside_vars = []\n",
        "for p, (xp, yp, _) in enumerate(crystals + mines):\n",
        "    inside = model.addVar(vtype=GRB.BINARY, name=f\"inside_{p}\")\n",
        "    inside_vars.append(inside)\n",
        "    cross_vars = model.addVars(n_vertices, vtype=GRB.BINARY, name=f\"cross_{p}\")\n",
        "\n",
        "    for i in range(n_vertices):\n",
        "        i_next = (i + 1) % n_vertices\n",
        "        cross_expr = (x[i_next] - x[i]) * (yp - y[i]) - (y[i_next] - y[i]) * (xp - x[i])\n",
        "        model.addConstr(cross_expr >= -epsilon_convex - big_M * (1 - cross_vars[i]))\n",
        "        model.addConstr(cross_expr <= epsilon_convex + big_M * (1 - cross_vars[i]))\n",
        "\n",
        "    model.addConstr(inside <= gp.quicksum(cross_vars[i] for i in range(n_vertices)))\n",
        "    model.addConstr(inside >= gp.quicksum(cross_vars[i] for i in range(n_vertices)) - n_vertices + 1)\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (F) Objective\n",
        "# --------------------------------------------------\n",
        "objective_expr = gp.quicksum(crystals[p][2] * inside_vars[p] for p in range(n_crystals)) \\\n",
        "               - gp.quicksum(mines[p][2] * inside_vars[p + n_crystals] for p in range(n_mines))\n",
        "model.setObjective(objective_expr, GRB.MAXIMIZE)\n",
        "\n",
        "# --------------------------------------------------\n",
        "# Solve the Model\n",
        "# --------------------------------------------------\n",
        "model.update()\n",
        "model.optimize()\n",
        "\n",
        "# --------------------------------------------------\n",
        "# Report Results\n",
        "# --------------------------------------------------\n",
        "if model.status == GRB.OPTIMAL:\n",
        "    print(\"\\nOptimal Polygon Vertex Coordinates:\")\n",
        "    for i in range(n_vertices):\n",
        "        print(f\" Vertex {i}: (x = {x[i].X}, y = {y[i].X})\")\n",
        "    print(\"\\nTotal Score =\", model.ObjVal)\n",
        "else:\n",
        "    print(f\"Optimization ended with status {model.status}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4gbESu92PUFP"
      },
      "source": [
        "above one is the best till now\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "BS68NziGGoX9",
        "outputId": "56c81136-48f4-48b0-cf01-cf43cb6d5242"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Set parameter WLSAccessID\n",
            "Set parameter WLSSecret\n",
            "Set parameter LicenseID to value 2616884\n",
            "Academic license 2616884 - for non-commercial use only - registered to ak___@iitg.ac.in\n",
            "Set parameter MIPFocus to value 1\n",
            "Set parameter NumericFocus to value 3\n",
            "Warning: zero or small (< 1e-13) coefficients in quadratic constraints, ignored\n",
            "Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - \"Ubuntu 22.04.4 LTS\")\n",
            "\n",
            "CPU model: Intel(R) Xeon(R) CPU @ 2.20GHz, instruction set [SSE2|AVX|AVX2]\n",
            "Thread count: 1 physical cores, 2 logical processors, using up to 2 threads\n",
            "\n",
            "Non-default parameters:\n",
            "MIPFocus  1\n",
            "NumericFocus  3\n",
            "\n",
            "Academic license 2616884 - for non-commercial use only - registered to ak___@iitg.ac.in\n",
            "Optimize a model with 104 rows, 257 columns and 456 nonzeros\n",
            "Model fingerprint: 0x0d27e6c3\n",
            "Model has 112 quadratic constraints\n",
            "Model has 162 simple general constraints\n",
            "  36 MAX, 36 MIN, 90 INDICATOR\n",
            "Variable types: 88 continuous, 169 integer (151 binary)\n",
            "Coefficient statistics:\n",
            "  Matrix range     [1e+00, 1e+05]\n",
            "  QMatrix range    [1e+00, 1e+00]\n",
            "  QLMatrix range   [1e+01, 1e+05]\n",
            "  Objective range  [0e+00, 0e+00]\n",
            "  Bounds range     [1e+00, 1e+04]\n",
            "  RHS range        [1e+00, 2e+05]\n",
            "  QRHS range       [1e+05, 1e+05]\n",
            "  GenCon rhs range [1e-05, 1e+00]\n",
            "  GenCon coe range [1e+00, 1e+00]\n",
            "Presolve added 378 rows and 288 columns\n",
            "Presolve time: 0.01s\n",
            "Presolved: 562 rows, 562 columns, 1838 nonzeros\n",
            "Presolved model has 216 SOS constraint(s)\n",
            "Presolved model has 16 bilinear constraint(s)\n",
            "\n",
            "Solving non-convex MIQCP\n",
            "\n",
            "Variable types: 337 continuous, 225 integer (225 binary)\n",
            "\n",
            "Root relaxation: objective -0.000000e+00, 260 iterations, 0.01 seconds (0.00 work units)\n",
            "\n",
            "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
            " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
            "\n",
            "     0     0   -0.00000    0   70          -   -0.00000      -     -    0s\n",
            "     0     2   -0.00000    0   70          -   -0.00000      -     -    0s\n",
            "  4211  2056   -0.00000   78    6          -   -0.00000      -   7.6    5s\n",
            " 10462  4648   -0.00000   89    4          -   -0.00000      -   5.1   10s\n",
            " 15707  5820   -0.00000   78    6          -   -0.00000      -   4.8   15s\n",
            " 21364  7711   -0.00000   81    2          -   -0.00000      -   4.5   20s\n",
            " 26778  7706 infeasible   81               -   -0.00000      -   4.7   25s\n",
            " 31139  7701   -0.00000   77    2          -   -0.00000      -   4.8   30s\n",
            " 36536  7750   -0.00000   81    2          -   -0.00000      -   4.9   35s\n",
            " 41599  7730 infeasible   80               -   -0.00000      -   5.0   40s\n",
            " 46520  7740 infeasible   84               -   -0.00000      -   5.0   45s\n",
            " 52030  7722   -0.00000   81    6          -   -0.00000      -   5.1   50s\n",
            " 56575  7747   -0.00000   76    2          -   -0.00000      -   5.1   55s\n",
            " 62059  7670 infeasible   83               -   -0.00000      -   5.1   60s\n",
            " 67213  7669   -0.00000   80    6          -   -0.00000      -   5.2   65s\n",
            " 72094  7657   -0.00000   78    6          -   -0.00000      -   5.2   70s\n",
            " 77646  7698 infeasible   84               -   -0.00000      -   5.2   75s\n",
            " 82174  7692   -0.00000   79    6          -   -0.00000      -   5.2   80s\n",
            " 87752  7682   -0.00000   84    6          -   -0.00000      -   5.2   85s\n",
            " 92868  7671 infeasible   80               -   -0.00000      -   5.2   90s\n",
            " 97815  7664   -0.00000   79    2          -   -0.00000      -   5.2   95s\n",
            " 103336  7650 infeasible   83               -   -0.00000      -   5.3  100s\n",
            " 107920  7696 infeasible   83               -   -0.00000      -   5.3  105s\n",
            " 113487  7722 infeasible   86               -   -0.00000      -   5.3  110s\n",
            " 118599  7727   -0.00000   84    2          -   -0.00000      -   5.3  115s\n",
            " 123498  7686   -0.00000   74    6          -   -0.00000      -   5.3  120s\n",
            " 129033  7663   -0.00000   81    2          -   -0.00000      -   5.3  125s\n",
            " 133599  7644   -0.00000   81    2          -   -0.00000      -   5.3  130s\n",
            " 139223  7683 infeasible   85               -   -0.00000      -   5.3  135s\n",
            " 144362  7650   -0.00000   82    6          -   -0.00000      -   5.3  140s\n",
            " 149310  7649 infeasible   84               -   -0.00000      -   5.3  145s\n",
            " 154841  7632 infeasible   85               -   -0.00000      -   5.3  150s\n",
            " 159393  7657 infeasible   81               -   -0.00000      -   5.3  155s\n",
            " 164946  7657 infeasible   80               -   -0.00000      -   5.3  160s\n",
            " 170117  7660 infeasible   82               -   -0.00000      -   5.3  165s\n",
            " 175075  7642   -0.00000   79    6          -   -0.00000      -   5.3  170s\n",
            " 180612  7632   -0.00000   78    2          -   -0.00000      -   5.3  175s\n",
            " 185223  7656 infeasible   85               -   -0.00000      -   5.3  180s\n",
            " 190764  7646   -0.00000   79    4          -   -0.00000      -   5.3  185s\n",
            " 195865  7667 infeasible   81               -   -0.00000      -   5.3  190s\n",
            " 200845  7661   -0.00000   87    6          -   -0.00000      -   5.3  195s\n",
            " 206309  7658   -0.00000   83    6          -   -0.00000      -   5.3  200s\n",
            " 210828  7661   -0.00000   80    6          -   -0.00000      -   5.3  205s\n",
            " 216366  7622   -0.00000   80    4          -   -0.00000      -   5.3  210s\n",
            " 221479  7633   -0.00000   73    6          -   -0.00000      -   5.3  215s\n",
            " 226500  7619   -0.00000   79    6          -   -0.00000      -   5.3  220s\n",
            " 232021  7620 infeasible   87               -   -0.00000      -   5.3  225s\n",
            " 236591  7592 infeasible   94               -   -0.00000      -   5.3  230s\n",
            " 242356  7633 infeasible   81               -   -0.00000      -   5.3  235s\n",
            " 247698  7601 infeasible   79               -   -0.00000      -   5.3  240s\n",
            " 252919  7625 infeasible   82               -   -0.00000      -   5.3  245s\n",
            " 258714  7636   -0.00000   80    2          -   -0.00000      -   5.3  250s\n",
            " 263507  7615   -0.00000   73    6          -   -0.00000      -   5.2  255s\n",
            " 269329  7613   -0.00000   77    2          -   -0.00000      -   5.2  260s\n",
            " 274676  7624 infeasible   80               -   -0.00000      -   5.2  265s\n",
            " 279918  7648   -0.00000   81    2          -   -0.00000      -   5.2  270s\n",
            " 285711  7633 infeasible   80               -   -0.00000      -   5.2  275s\n",
            " 290532  7673   -0.00000   82    2          -   -0.00000      -   5.2  280s\n",
            " 296350  8003   -0.00000   76    6          -   -0.00000      -   5.2  285s\n",
            " 301564  7989   -0.00000   78    2          -   -0.00000      -   5.1  290s\n",
            " 306758  7969   -0.00000   76    6          -   -0.00000      -   5.1  295s\n",
            " 312494  7993   -0.00000   76    6          -   -0.00000      -   5.1  300s\n",
            " 317202  8029   -0.00000   71    6          -   -0.00000      -   5.1  305s\n",
            " 322874  7972   -0.00000   81    2          -   -0.00000      -   5.1  310s\n",
            " 328109  8050   -0.00000   77    2          -   -0.00000      -   5.0  315s\n",
            " 333273  8120 infeasible   78               -   -0.00000      -   5.0  320s\n",
            " 338904  8046   -0.00000   78    6          -   -0.00000      -   5.0  325s\n",
            " 343551  7989 infeasible   77               -   -0.00000      -   5.0  330s\n",
            " 349239  8011 infeasible   81               -   -0.00000      -   5.0  335s\n",
            " 354403  7981   -0.00000   76    6          -   -0.00000      -   4.9  340s\n",
            " 359488  7973   -0.00000   79    6          -   -0.00000      -   4.9  345s\n",
            " 365147  8027   -0.00000   80    2          -   -0.00000      -   4.9  350s\n",
            " 369740  7990   -0.00000   75    6          -   -0.00000      -   4.9  355s\n",
            " 375283  8013   -0.00000   77    6          -   -0.00000      -   4.9  360s\n",
            " 380436  7994   -0.00000   79    2          -   -0.00000      -   4.9  365s\n",
            " 385469  7958   -0.00000   77    6          -   -0.00000      -   4.9  370s\n",
            " 391155  7965   -0.00000   80    2          -   -0.00000      -   4.9  375s\n",
            " 395822  7988   -0.00000   77    2          -   -0.00000      -   4.8  380s\n",
            " 401466  7955 infeasible   78               -   -0.00000      -   4.8  385s\n",
            " 406691  7967 infeasible   81               -   -0.00000      -   4.8  390s\n",
            " 411748  7945 infeasible   80               -   -0.00000      -   4.8  395s\n",
            " 417428  7936 infeasible   80               -   -0.00000      -   4.8  400s\n",
            " 422077  7934 infeasible   82               -   -0.00000      -   4.8  405s\n",
            " 427737  7933 infeasible   77               -   -0.00000      -   4.8  410s\n",
            " 432956  7937   -0.00000   72    6          -   -0.00000      -   4.8  415s\n",
            " 438075  7912   -0.00000   77    6          -   -0.00000      -   4.8  420s\n",
            " 443732  7924 infeasible   76               -   -0.00000      -   4.8  425s\n",
            " 448393  7944   -0.00000   75    2          -   -0.00000      -   4.7  430s\n",
            " 454043  7916   -0.00000   77    2          -   -0.00000      -   4.7  435s\n",
            " 459322  7886   -0.00000   77    2          -   -0.00000      -   4.7  440s\n",
            " 464423  7927 infeasible   74               -   -0.00000      -   4.7  445s\n",
            " 470079  7925 infeasible   73               -   -0.00000      -   4.7  450s\n",
            " 474575  7851   -0.00000   75    6          -   -0.00000      -   4.7  455s\n",
            " 480033  7865 infeasible   84               -   -0.00000      -   4.7  460s\n",
            " 485112  7866   -0.00000   83    2          -   -0.00000      -   4.7  465s\n",
            " 490005  7891 infeasible   84               -   -0.00000      -   4.7  470s\n",
            " 495431  7876 infeasible   80               -   -0.00000      -   4.8  475s\n",
            " 499938  7923   -0.00000   81    6          -   -0.00000      -   4.8  480s\n",
            " 505432  7886 infeasible   86               -   -0.00000      -   4.8  485s\n",
            " 510490  7874   -0.00000   84    2          -   -0.00000      -   4.8  490s\n",
            " 515379  7879   -0.00000   81    6          -   -0.00000      -   4.8  495s\n",
            " 520897  7864   -0.00000   80    6          -   -0.00000      -   4.8  500s\n",
            " 525384  7822   -0.00000   78    6          -   -0.00000      -   4.8  505s\n",
            " 530868  7838   -0.00000   82    4          -   -0.00000      -   4.8  510s\n",
            " 535913  7824 infeasible   82               -   -0.00000      -   4.8  515s\n",
            " 540770  7848   -0.00000   83    6          -   -0.00000      -   4.8  520s\n",
            " 546227  7807 infeasible   85               -   -0.00000      -   4.8  525s\n",
            " 550709  7811   -0.00000   79    2          -   -0.00000      -   4.8  530s\n",
            " 556163  7831   -0.00000   81    4          -   -0.00000      -   4.8  535s\n",
            " 561187  7830   -0.00000   80    2          -   -0.00000      -   4.8  540s\n",
            " 566046  7892 infeasible   80               -   -0.00000      -   4.8  545s\n",
            " 571461  7828   -0.00000   85    6          -   -0.00000      -   4.8  550s\n",
            " 575930  7834 infeasible   81               -   -0.00000      -   4.8  555s\n",
            " 581363  7804 infeasible   82               -   -0.00000      -   4.9  560s\n",
            " 586414  7867   -0.00000   79    2          -   -0.00000      -   4.9  565s\n",
            " 591249  7880   -0.00000   83    2          -   -0.00000      -   4.9  570s\n",
            " 596720  7855   -0.00000   87    4          -   -0.00000      -   4.9  575s\n",
            " 601183  7824 infeasible   82               -   -0.00000      -   4.9  580s\n",
            " 606565  7781   -0.00000   85    2          -   -0.00000      -   4.9  585s\n",
            " 611585  7784   -0.00000   80    6          -   -0.00000      -   4.9  590s\n",
            " 616439  7870   -0.00000   81    2          -   -0.00000      -   4.9  595s\n",
            " 621860  7902 infeasible   84               -   -0.00000      -   4.9  600s\n",
            " 626309  7935   -0.00000   81    4          -   -0.00000      -   4.9  605s\n",
            " 631704  7899   -0.00000   83    2          -   -0.00000      -   4.9  610s\n",
            " 636760  7881 infeasible   83               -   -0.00000      -   4.9  615s\n",
            " 641637  7877 infeasible   84               -   -0.00000      -   4.9  620s\n",
            " 647055  7873   -0.00000   79    2          -   -0.00000      -   4.9  625s\n",
            " 651475  7902 infeasible   84               -   -0.00000      -   4.9  630s\n",
            " 656907  7904 infeasible   81               -   -0.00000      -   4.9  635s\n",
            " 661963  7870   -0.00000   83    2          -   -0.00000      -   4.9  640s\n",
            " 666800  7930 infeasible   84               -   -0.00000      -   4.9  645s\n",
            " 672212  7882   -0.00000   82    4          -   -0.00000      -   4.9  650s\n",
            " 676684  7914   -0.00000   81    2          -   -0.00000      -   4.9  655s\n",
            " 682094  7924 infeasible   89               -   -0.00000      -   4.9  660s\n",
            " 687171  7832   -0.00000   84    4          -   -0.00000      -   4.9  665s\n",
            " 692094  7819 infeasible   77               -   -0.00000      -   4.9  670s\n",
            " 697765  7859   -0.00000   78    2          -   -0.00000      -   4.9  675s\n",
            " 702404  7820 infeasible   77               -   -0.00000      -   4.9  680s\n",
            " 708097  7823   -0.00000   79    2          -   -0.00000      -   4.9  685s\n",
            " 713394  7854 infeasible   80               -   -0.00000      -   4.9  690s\n",
            " 718375  7918   -0.00000   78    2          -   -0.00000      -   4.9  695s\n",
            " 723955  7803 infeasible   81               -   -0.00000      -   4.9  700s\n",
            " 728684  7876   -0.00000   76    2          -   -0.00000      -   4.9  705s\n",
            " 734266  7777   -0.00000   79    6          -   -0.00000      -   4.9  710s\n",
            " 739450  7855   -0.00000   83    2          -   -0.00000      -   4.9  715s\n",
            " 744234  7790   -0.00000   81    2          -   -0.00000      -   4.9  720s\n",
            " 749687  7856   -0.00000   79    4          -   -0.00000      -   4.9  725s\n",
            " 754102  7768   -0.00000   84    2          -   -0.00000      -   4.9  730s\n",
            " 759552  7755 infeasible   84               -   -0.00000      -   4.9  735s\n",
            " 764758  7824   -0.00000   83    2          -   -0.00000      -   4.9  740s\n",
            " 769432  7775   -0.00000   84    4          -   -0.00000      -   4.9  745s\n",
            " 774832  7801   -0.00000   78    6          -   -0.00000      -   4.9  750s\n",
            " 779287  7827 infeasible   81               -   -0.00000      -   4.9  755s\n",
            " 784700  7786   -0.00000   81    2          -   -0.00000      -   4.9  760s\n",
            " 789898  7783   -0.00000   79    2          -   -0.00000      -   4.9  765s\n",
            " 794621  7812 infeasible   84               -   -0.00000      -   4.9  770s\n",
            " 800091  7825   -0.00000   79    6          -   -0.00000      -   4.9  775s\n",
            " 804512  7772 infeasible   83               -   -0.00000      -   4.9  780s\n",
            " 809956  7776 infeasible   82               -   -0.00000      -   4.9  785s\n",
            " 815137  7760   -0.00000   80    6          -   -0.00000      -   4.9  790s\n",
            " 819914  7810 infeasible   78               -   -0.00000      -   4.9  795s\n",
            " 825372  7835   -0.00000   80    4          -   -0.00000      -   4.9  800s\n",
            " 829940  7942   -0.00000   88    2          -   -0.00000      -   4.9  805s\n",
            " 835412  7942   -0.00000   84    6          -   -0.00000      -   4.9  810s\n",
            " 840597  7936 infeasible   82               -   -0.00000      -   4.9  815s\n",
            " 845346  7913 infeasible   82               -   -0.00000      -   4.9  820s\n",
            " 850746  7962   -0.00000   77    6          -   -0.00000      -   4.9  825s\n",
            " 855214  7957 infeasible   82               -   -0.00000      -   4.9  830s\n",
            " 860676  7936   -0.00000   86    6          -   -0.00000      -   4.9  835s\n",
            " 865835  7882   -0.00000   85    2          -   -0.00000      -   5.0  840s\n",
            " 870621  7861   -0.00000   80    2          -   -0.00000      -   5.0  845s\n",
            " 876068  7841   -0.00000   77    2          -   -0.00000      -   5.0  850s\n",
            " 880561  7814   -0.00000   84    2          -   -0.00000      -   5.0  855s\n",
            " 886053  7762   -0.00000   86    4          -   -0.00000      -   5.0  860s\n",
            " 891316  7852   -0.00000   79    4          -   -0.00000      -   5.0  865s\n",
            " 896054  7826   -0.00000   76    2          -   -0.00000      -   5.0  870s\n",
            " 901591  7823   -0.00000   79    6          -   -0.00000      -   5.0  875s\n",
            " 906046  7750   -0.00000   78    6          -   -0.00000      -   5.0  880s\n",
            " 911591  7799   -0.00000   81    6          -   -0.00000      -   5.0  885s\n",
            " 916787  7802   -0.00000   83    2          -   -0.00000      -   5.0  890s\n",
            " 921584  7755 infeasible   85               -   -0.00000      -   5.0  895s\n",
            " 927060  7899   -0.00000   79    4          -   -0.00000      -   5.0  900s\n",
            " 931475  7873 infeasible   82               -   -0.00000      -   5.0  905s\n",
            " 936889  7845   -0.00000   86    2          -   -0.00000      -   5.0  910s\n",
            " 942098  7764   -0.00000   83    2          -   -0.00000      -   5.0  915s\n",
            " 946906  7815 infeasible   83               -   -0.00000      -   5.0  920s\n",
            " 952350  7770 infeasible   83               -   -0.00000      -   5.0  925s\n",
            " 956794  7798 infeasible   83               -   -0.00000      -   5.0  930s\n",
            " 962297  7794   -0.00000   84    2          -   -0.00000      -   5.0  935s\n",
            " 967625  7921   -0.00000   81    6          -   -0.00000      -   5.0  940s\n",
            " 972398  7836 infeasible   84               -   -0.00000      -   5.0  945s\n",
            " 977923  7786   -0.00000   87    2          -   -0.00000      -   5.0  950s\n",
            " 982492  7768   -0.00000   85    2          -   -0.00000      -   5.0  955s\n",
            " 988147  7751 infeasible   79               -   -0.00000      -   5.0  960s\n",
            " 993569  7790   -0.00000   78    6          -   -0.00000      -   5.0  965s\n",
            " 998506  7761 infeasible   81               -   -0.00000      -   5.0  970s\n",
            " 1004243  7835   -0.00000   71    6          -   -0.00000      -   5.0  975s\n",
            " 1008930  7819 infeasible   78               -   -0.00000      -   5.0  980s\n",
            " 1014604  7757 infeasible   80               -   -0.00000      -   5.0  985s\n",
            " 1020006  7773 infeasible   81               -   -0.00000      -   5.0  990s\n",
            " 1024895  7754 infeasible   78               -   -0.00000      -   5.0  995s\n",
            " 1030544  7787 infeasible   76               -   -0.00000      -   5.0 1000s\n",
            " 1035211  7802   -0.00000   78    2          -   -0.00000      -   4.9 1005s\n",
            " 1040858  7750   -0.00000   77    2          -   -0.00000      -   4.9 1010s\n",
            " 1046310  7731 infeasible   82               -   -0.00000      -   4.9 1015s\n",
            " 1051214  7773 infeasible   77               -   -0.00000      -   4.9 1020s\n",
            " 1056932  7712 infeasible   77               -   -0.00000      -   4.9 1025s\n",
            " 1061635  7753   -0.00000   77    6          -   -0.00000      -   4.9 1030s\n",
            " 1067347  7731   -0.00000   80    2          -   -0.00000      -   4.9 1035s\n",
            " 1072817  7741   -0.00000   75    6          -   -0.00000      -   4.9 1040s\n",
            " 1077760  7776 infeasible   79               -   -0.00000      -   4.9 1045s\n",
            " 1083447  7735   -0.00000   71    6          -   -0.00000      -   4.9 1050s\n",
            " 1088121  7741   -0.00000   75    6          -   -0.00000      -   4.9 1055s\n",
            " 1093908  7960 infeasible   75               -   -0.00000      -   4.9 1060s\n",
            " 1099445  7959   -0.00000   75    6          -   -0.00000      -   4.9 1065s\n",
            " 1104275  7908 infeasible   80               -   -0.00000      -   4.9 1070s\n",
            " 1109915  7875   -0.00000   79    2          -   -0.00000      -   4.9 1075s\n",
            " 1114573  7928   -0.00000   78    6          -   -0.00000      -   4.9 1080s\n",
            " 1120199  7840 infeasible   77               -   -0.00000      -   4.9 1085s\n",
            " 1125627  7914 infeasible   79               -   -0.00000      -   4.9 1090s\n",
            " 1130465  7841   -0.00000   76    6          -   -0.00000      -   4.9 1095s\n",
            " 1135912  7836   -0.00000   77    6          -   -0.00000      -   4.9 1100s\n",
            " 1140473  7868   -0.00000   79    4          -   -0.00000      -   4.9 1105s\n",
            " 1145945  7818   -0.00000   83    2          -   -0.00000      -   4.9 1110s\n",
            " 1151240  7835 infeasible   75               -   -0.00000      -   4.9 1115s\n",
            " 1155979  7817   -0.00000   76    2          -   -0.00000      -   4.9 1120s\n",
            " 1161501  7809   -0.00000   76    6          -   -0.00000      -   4.9 1125s\n",
            " 1166045  7909   -0.00000   79    2          -   -0.00000      -   4.9 1130s\n",
            " 1171507  7824 infeasible   84               -   -0.00000      -   4.9 1135s\n",
            " 1176870  7842 infeasible   78               -   -0.00000      -   4.9 1140s\n",
            " 1181753  7819   -0.00000   77    6          -   -0.00000      -   4.9 1145s\n",
            " 1187457  7787   -0.00000   79    2          -   -0.00000      -   4.9 1150s\n",
            " 1192140  7763 infeasible   78               -   -0.00000      -   4.9 1155s\n",
            " 1197830  7745   -0.00000   74    6          -   -0.00000      -   4.9 1160s\n",
            " 1203279  7766   -0.00000   78    2          -   -0.00000      -   4.9 1165s\n",
            " 1208166  7739 infeasible   80               -   -0.00000      -   4.9 1170s\n",
            " 1213858  7730   -0.00000   73    6          -   -0.00000      -   4.9 1175s\n",
            " 1218506  7724   -0.00000   72    6          -   -0.00000      -   4.9 1180s\n",
            " 1224215  7729   -0.00000   79    4          -   -0.00000      -   4.8 1185s\n",
            " 1229715  7799   -0.00000   76    2          -   -0.00000      -   4.8 1190s\n",
            " 1234605  7720   -0.00000   72    6          -   -0.00000      -   4.8 1195s\n",
            " 1240273  7741 infeasible   80               -   -0.00000      -   4.8 1200s\n",
            " 1244923  7710 infeasible   80               -   -0.00000      -   4.8 1205s\n",
            " 1250619  7758   -0.00000   76    6          -   -0.00000      -   4.8 1210s\n",
            " 1256089  7771 infeasible   80               -   -0.00000      -   4.8 1215s\n",
            " 1261015  7791 infeasible   81               -   -0.00000      -   4.8 1220s\n",
            " 1266700  7738   -0.00000   76    6          -   -0.00000      -   4.8 1225s\n",
            " 1271381  7770 infeasible   78               -   -0.00000      -   4.8 1230s\n",
            " 1277104  7783 infeasible   82               -   -0.00000      -   4.8 1235s\n",
            " 1282568  7775   -0.00000   72    6          -   -0.00000      -   4.8 1240s\n",
            " 1287459  7759   -0.00000   74    6          -   -0.00000      -   4.8 1245s\n",
            " 1293106  7732   -0.00000   78    2          -   -0.00000      -   4.8 1250s\n",
            " 1297762  7736   -0.00000   75    2          -   -0.00000      -   4.8 1255s\n",
            " 1303452  7762 infeasible   75               -   -0.00000      -   4.8 1260s\n",
            " 1308914  7720 infeasible   80               -   -0.00000      -   4.8 1265s\n",
            " 1313807  7745   -0.00000   73    6          -   -0.00000      -   4.8 1270s\n",
            " 1319512  7705   -0.00000   72    6          -   -0.00000      -   4.8 1275s\n",
            " 1324225  7752   -0.00000   78    6          -   -0.00000      -   4.8 1280s\n",
            " 1329919  7700 infeasible   77               -   -0.00000      -   4.8 1285s\n",
            " 1335370  7705   -0.00000   74    6          -   -0.00000      -   4.8 1290s\n",
            " 1340323  7730 infeasible   76               -   -0.00000      -   4.8 1295s\n",
            " 1346019  7756   -0.00000   77    2          -   -0.00000      -   4.8 1300s\n",
            " 1350683  7749   -0.00000   76    2          -   -0.00000      -   4.8 1305s\n",
            " 1356391  7736   -0.00000   71    6          -   -0.00000      -   4.8 1310s\n",
            " 1361872  7843   -0.00000   77    6          -   -0.00000      -   4.8 1315s\n",
            " 1366755  7807 infeasible   74               -   -0.00000      -   4.8 1320s\n",
            " 1372411  7769 infeasible   75               -   -0.00000      -   4.8 1325s\n",
            " 1377128  7752   -0.00000   76    6          -   -0.00000      -   4.8 1330s\n",
            " 1382880  7800 infeasible   75               -   -0.00000      -   4.8 1335s\n",
            " 1388336  7753   -0.00000   75    6          -   -0.00000      -   4.8 1340s\n",
            " 1393223  7695 infeasible   77               -   -0.00000      -   4.8 1345s\n",
            " 1398924  7852   -0.00000   76    6          -   -0.00000      -   4.8 1350s\n",
            " 1403580  7803   -0.00000   78    2          -   -0.00000      -   4.8 1355s\n",
            " 1409217  7762 infeasible   75               -   -0.00000      -   4.7 1360s\n",
            " 1414718  7878   -0.00000   76    2          -   -0.00000      -   4.7 1365s\n",
            " 1419620  7796   -0.00000   77    6          -   -0.00000      -   4.7 1370s\n",
            " 1425331  7744 infeasible   78               -   -0.00000      -   4.7 1375s\n",
            " 1430030  7740   -0.00000   76    2          -   -0.00000      -   4.7 1380s\n",
            " 1435740  7746   -0.00000   76    6          -   -0.00000      -   4.7 1385s\n",
            " 1441254  7727 infeasible   76               -   -0.00000      -   4.7 1390s\n",
            " 1446206  7788 infeasible   79               -   -0.00000      -   4.7 1395s\n",
            " 1451904  7735   -0.00000   74    6          -   -0.00000      -   4.7 1400s\n",
            " 1456582  7749   -0.00000   75    2          -   -0.00000      -   4.7 1405s\n",
            " 1462247  7713 infeasible   80               -   -0.00000      -   4.7 1410s\n",
            " 1467732  7736   -0.00000   75    6          -   -0.00000      -   4.7 1415s\n",
            " 1472650  7759 infeasible   79               -   -0.00000      -   4.7 1420s\n",
            " 1478390  7779   -0.00000   75    2          -   -0.00000      -   4.7 1425s\n",
            " 1483111  7737   -0.00000   77    2          -   -0.00000      -   4.7 1430s\n",
            " 1488847  7748 infeasible   80               -   -0.00000      -   4.7 1435s\n",
            " 1494303  7727   -0.00000   78    2          -   -0.00000      -   4.7 1440s\n",
            " 1499255  7712   -0.00000   80    4          -   -0.00000      -   4.7 1445s\n",
            " 1505015  7741   -0.00000   80    6          -   -0.00000      -   4.7 1450s\n",
            " 1509757  7678   -0.00000   80    2          -   -0.00000      -   4.7 1455s\n",
            " 1515571  7629 infeasible   81               -   -0.00000      -   4.7 1460s\n",
            " 1521089  7640   -0.00000   77    6          -   -0.00000      -   4.7 1465s\n",
            " 1526047  7658   -0.00000   79    2          -   -0.00000      -   4.7 1470s\n",
            " 1531773  7634 infeasible   77               -   -0.00000      -   4.7 1475s\n",
            " 1536498  7605 infeasible   82               -   -0.00000      -   4.7 1480s\n",
            " 1542289  7627   -0.00000   77    6          -   -0.00000      -   4.7 1485s\n",
            " 1547721  7624   -0.00000   81    4          -   -0.00000      -   4.7 1490s\n",
            " 1552770  7639 infeasible   83               -   -0.00000      -   4.7 1495s\n",
            " 1558552  7613   -0.00000   75    6          -   -0.00000      -   4.7 1500s\n",
            " 1563319  7616   -0.00000   82    2          -   -0.00000      -   4.7 1505s\n",
            " 1569148  7619 infeasible   83               -   -0.00000      -   4.7 1510s\n",
            " 1574652  7624 infeasible   83               -   -0.00000      -   4.7 1515s\n",
            " 1579684  7650 infeasible   82               -   -0.00000      -   4.7 1520s\n",
            " 1585437  7630   -0.00000   81    6          -   -0.00000      -   4.7 1525s\n",
            " 1590096  7626   -0.00000   80    6          -   -0.00000      -   4.7 1530s\n",
            " 1595837  7651   -0.00000   80    2          -   -0.00000      -   4.7 1535s\n",
            " 1601349  7646   -0.00000   76    6          -   -0.00000      -   4.7 1540s\n",
            " 1606427  7659   -0.00000   78    6          -   -0.00000      -   4.7 1545s\n",
            " 1612205  7655   -0.00000   78    4          -   -0.00000      -   4.7 1550s\n",
            " 1616992  7671   -0.00000   79    2          -   -0.00000      -   4.7 1555s\n",
            " 1622710  7652 infeasible   79               -   -0.00000      -   4.7 1560s\n",
            " 1628217  7672 infeasible   79               -   -0.00000      -   4.7 1565s\n",
            " 1633267  7645 infeasible   78               -   -0.00000      -   4.7 1570s\n",
            " 1639049  7673   -0.00000   81    6          -   -0.00000      -   4.7 1575s\n",
            " 1643798  7663 infeasible   79               -   -0.00000      -   4.7 1580s\n",
            " 1649584  7640   -0.00000   76    6          -   -0.00000      -   4.7 1585s\n",
            " 1655032  7657 infeasible   80               -   -0.00000      -   4.7 1590s\n",
            " 1660113  7670   -0.00000   82    6          -   -0.00000      -   4.7 1595s\n",
            " 1665873  7605 infeasible   80               -   -0.00000      -   4.7 1600s\n",
            " 1670550  7601   -0.00000   77    2          -   -0.00000      -   4.7 1605s\n",
            " 1676287  7611   -0.00000   77    2          -   -0.00000      -   4.7 1610s\n",
            " 1681772  7613 infeasible   82               -   -0.00000      -   4.7 1615s\n",
            " 1686725  7622   -0.00000   78    2          -   -0.00000      -   4.7 1620s\n",
            " 1692525  7620   -0.00000   78    6          -   -0.00000      -   4.7 1625s\n",
            " 1697273  7613 infeasible   83               -   -0.00000      -   4.7 1630s\n",
            " 1703081  7603   -0.00000   81    2          -   -0.00000      -   4.7 1635s\n",
            " 1708607  7677 infeasible   80               -   -0.00000      -   4.7 1640s\n",
            " 1713555  7647 infeasible   82               -   -0.00000      -   4.7 1645s\n",
            " 1719264  7634   -0.00000   80    6          -   -0.00000      -   4.7 1650s\n",
            " 1723970  7639 infeasible   81               -   -0.00000      -   4.7 1655s\n",
            " 1729670  7671 infeasible   82               -   -0.00000      -   4.7 1660s\n",
            " 1735123  7676   -0.00000   84    2          -   -0.00000      -   4.7 1665s\n",
            " 1740071  7632   -0.00000   83    2          -   -0.00000      -   4.7 1670s\n",
            " 1745846  7668 infeasible   81               -   -0.00000      -   4.7 1675s\n",
            " 1750532  7672 infeasible   83               -   -0.00000      -   4.7 1680s\n",
            " 1756236  7653   -0.00000   83    4          -   -0.00000      -   4.7 1685s\n",
            " 1761709  7634 infeasible   85               -   -0.00000      -   4.7 1690s\n",
            " 1766705  7630   -0.00000   88    2          -   -0.00000      -   4.7 1695s\n",
            " 1772446  7603   -0.00000   81    2          -   -0.00000      -   4.7 1700s\n",
            " 1777184  7589   -0.00000   78    6          -   -0.00000      -   4.7 1705s\n",
            " 1782929  7610   -0.00000   81    2          -   -0.00000      -   4.7 1710s\n",
            " 1788371  7615 infeasible   80               -   -0.00000      -   4.7 1715s\n",
            " 1793366  7621   -0.00000   78    2          -   -0.00000      -   4.7 1720s\n",
            " 1799073  7628   -0.00000   77    6          -   -0.00000      -   4.7 1725s\n",
            " 1803824  7617   -0.00000   79    6          -   -0.00000      -   4.7 1730s\n",
            " 1809588  7644   -0.00000   78    2          -   -0.00000      -   4.7 1735s\n",
            " 1815053  7651   -0.00000   76    6          -   -0.00000      -   4.7 1740s\n",
            " 1819994  7612 infeasible   82               -   -0.00000      -   4.7 1745s\n",
            " 1825663  7597   -0.00000   79    2          -   -0.00000      -   4.7 1750s\n",
            " 1830436  7622   -0.00000   81    2          -   -0.00000      -   4.7 1755s\n",
            " 1836196  7611   -0.00000   77    6          -   -0.00000      -   4.7 1760s\n",
            " 1841716  7649 infeasible   78               -   -0.00000      -   4.7 1765s\n",
            " 1846694  7657 infeasible   81               -   -0.00000      -   4.7 1770s\n",
            " 1852426  7648   -0.00000   81    6          -   -0.00000      -   4.7 1775s\n",
            " 1857111  7662   -0.00000   78    2          -   -0.00000      -   4.7 1780s\n",
            " 1862829  7678   -0.00000   78    2          -   -0.00000      -   4.7 1785s\n",
            " 1868295  7661 infeasible   77               -   -0.00000      -   4.7 1790s\n",
            " 1873268  7657 infeasible   78               -   -0.00000      -   4.7 1795s\n",
            " 1878991  7652   -0.00000   77    6          -   -0.00000      -   4.7 1800s\n",
            " 1883684  7667 infeasible   78               -   -0.00000      -   4.7 1805s\n",
            " 1889437  7651 infeasible   83               -   -0.00000      -   4.7 1810s\n",
            " 1894971  7686   -0.00000   77    6          -   -0.00000      -   4.7 1815s\n",
            " 1899935  7668   -0.00000   77    2          -   -0.00000      -   4.7 1820s\n",
            " 1905695  7646   -0.00000   74    6          -   -0.00000      -   4.7 1825s\n",
            " 1910368  7636 infeasible   83               -   -0.00000      -   4.7 1830s\n",
            " 1916075  7661   -0.00000   77    6          -   -0.00000      -   4.7 1835s\n",
            " 1921543  7631 infeasible   79               -   -0.00000      -   4.7 1840s\n",
            " 1926537  7633   -0.00000   81    6          -   -0.00000      -   4.7 1845s\n",
            " 1932288  7603 infeasible   80               -   -0.00000      -   4.7 1850s\n",
            " 1937087  7581   -0.00000   69    6          -   -0.00000      -   4.7 1855s\n",
            " 1942851  7596   -0.00000   80    2          -   -0.00000      -   4.7 1860s\n",
            " 1948387  7618   -0.00000   80    6          -   -0.00000      -   4.7 1865s\n",
            " 1953394  7597 infeasible   81               -   -0.00000      -   4.7 1870s\n",
            " 1959211  7626   -0.00000   78    2          -   -0.00000      -   4.7 1875s\n",
            " 1963965  7601   -0.00000   80    6          -   -0.00000      -   4.7 1880s\n",
            " 1969761  7606   -0.00000   77    6          -   -0.00000      -   4.7 1885s\n",
            " 1975299  7622 infeasible   78               -   -0.00000      -   4.7 1890s\n",
            " 1980288  7643 infeasible   83               -   -0.00000      -   4.7 1895s\n",
            " 1986038  7601   -0.00000   74    6          -   -0.00000      -   4.7 1900s\n",
            " 1990800  7614   -0.00000   76    6          -   -0.00000      -   4.7 1905s\n",
            " 1996554  7628 infeasible   80               -   -0.00000      -   4.7 1910s\n",
            " 2002078  7610 infeasible   82               -   -0.00000      -   4.7 1915s\n",
            " 2007016  7617 infeasible   83               -   -0.00000      -   4.7 1920s\n",
            " 2012753  7599 infeasible   82               -   -0.00000      -   4.7 1925s\n",
            " 2017493  7600   -0.00000   81    2          -   -0.00000      -   4.7 1930s\n",
            " 2023279  7612   -0.00000   84    4          -   -0.00000      -   4.7 1935s\n",
            " 2028851  7593   -0.00000   81    6          -   -0.00000      -   4.7 1940s\n",
            " 2033829  7650   -0.00000   81    2          -   -0.00000      -   4.7 1945s\n",
            " 2039587  7652 infeasible   79               -   -0.00000      -   4.7 1950s\n",
            " 2044240  7677 infeasible   78               -   -0.00000      -   4.7 1955s\n",
            " 2050012  7659 infeasible   77               -   -0.00000      -   4.7 1960s\n",
            " 2055556  7665   -0.00000   76    6          -   -0.00000      -   4.6 1965s\n",
            " 2060506  7634 infeasible   77               -   -0.00000      -   4.6 1970s\n",
            " 2066253  7672   -0.00000   76    6          -   -0.00000      -   4.6 1975s\n",
            " 2070939  7680   -0.00000   78    6          -   -0.00000      -   4.6 1980s\n",
            " 2076682  7660 infeasible   75               -   -0.00000      -   4.6 1985s\n",
            " 2082192  7675 infeasible   78               -   -0.00000      -   4.6 1990s\n",
            " 2087140  7683   -0.00000   78    2          -   -0.00000      -   4.6 1995s\n",
            " 2092916  7675   -0.00000   77    6          -   -0.00000      -   4.6 2000s\n",
            " 2097642  7663 infeasible   78               -   -0.00000      -   4.6 2005s\n",
            " 2103388  7677 infeasible   80               -   -0.00000      -   4.6 2010s\n",
            " 2108869  7660   -0.00000   77    2          -   -0.00000      -   4.6 2015s\n",
            " 2113785  7680 infeasible   79               -   -0.00000      -   4.6 2020s\n",
            " 2119551  7649 infeasible   76               -   -0.00000      -   4.6 2025s\n",
            " 2124188  7652   -0.00000   76    2          -   -0.00000      -   4.6 2030s\n",
            " 2129978  7653   -0.00000   75    6          -   -0.00000      -   4.6 2035s\n",
            " 2135492  7654 infeasible   80               -   -0.00000      -   4.6 2040s\n",
            " 2140387  7638 infeasible   83               -   -0.00000      -   4.6 2045s\n",
            " 2146098  7594 infeasible   81               -   -0.00000      -   4.6 2050s\n",
            " 2150757  7626   -0.00000   82    2          -   -0.00000      -   4.6 2055s\n",
            " 2156453  7602   -0.00000   79    6          -   -0.00000      -   4.6 2060s\n",
            " 2162002  7635 infeasible   77               -   -0.00000      -   4.6 2065s\n",
            " 2166814  7601   -0.00000   76    6          -   -0.00000      -   4.6 2070s\n",
            " 2172443  7617 infeasible   80               -   -0.00000      -   4.6 2075s\n",
            " 2177099  7612   -0.00000   81    2          -   -0.00000      -   4.6 2080s\n",
            " 2182819  7635 infeasible   81               -   -0.00000      -   4.6 2085s\n",
            " 2188334  7618 infeasible   79               -   -0.00000      -   4.6 2090s\n",
            " 2193194  7616   -0.00000   78    6          -   -0.00000      -   4.6 2095s\n",
            " 2198911  7601   -0.00000   79    2          -   -0.00000      -   4.6 2100s\n",
            " 2203564  7624   -0.00000   77    6          -   -0.00000      -   4.6 2105s\n",
            " 2209252  7610 infeasible   79               -   -0.00000      -   4.6 2110s\n",
            " 2214847  7610   -0.00000   81    2          -   -0.00000      -   4.6 2115s\n",
            " 2219733  7610   -0.00000   80    2          -   -0.00000      -   4.6 2120s\n",
            " 2225455  7621   -0.00000   75    6          -   -0.00000      -   4.6 2125s\n",
            " 2230176  7657 infeasible   82               -   -0.00000      -   4.6 2130s\n",
            " 2235840  7608   -0.00000   77    6          -   -0.00000      -   4.6 2135s\n",
            " 2241378  7647 infeasible   79               -   -0.00000      -   4.6 2140s\n",
            " 2246194  7639 infeasible   80               -   -0.00000      -   4.6 2145s\n",
            " 2251942  7655   -0.00000   82    2          -   -0.00000      -   4.6 2150s\n",
            " 2256644  7647   -0.00000   77    6          -   -0.00000      -   4.6 2155s\n",
            " 2262310  7641   -0.00000   83    6          -   -0.00000      -   4.6 2160s\n",
            " 2267866  7598 infeasible   81               -   -0.00000      -   4.6 2165s\n",
            " 2272634  7593 infeasible   80               -   -0.00000      -   4.6 2170s\n",
            " 2278312  7597   -0.00000   75    2          -   -0.00000      -   4.6 2175s\n",
            " 2283014  7636 infeasible   78               -   -0.00000      -   4.6 2180s\n",
            " 2288666  7603   -0.00000   79    4          -   -0.00000      -   4.6 2185s\n",
            " 2294309  7624 infeasible   80               -   -0.00000      -   4.6 2190s\n",
            " 2299044  7595 infeasible   81               -   -0.00000      -   4.6 2195s\n",
            " 2304755  7585 infeasible   83               -   -0.00000      -   4.6 2200s\n",
            " 2309431  7654   -0.00000   79    6          -   -0.00000      -   4.6 2205s\n",
            " 2315062  7646   -0.00000   80    2          -   -0.00000      -   4.6 2210s\n",
            " 2320636  7664   -0.00000   77    6          -   -0.00000      -   4.6 2215s\n",
            " 2325378  7670 infeasible   76               -   -0.00000      -   4.6 2220s\n",
            " 2331003  7649   -0.00000   75    2          -   -0.00000      -   4.6 2225s\n",
            " 2335684  7682   -0.00000   77    6          -   -0.00000      -   4.6 2230s\n",
            " 2341381  7665 infeasible   76               -   -0.00000      -   4.6 2235s\n",
            " 2346962  7661   -0.00000   71    6          -   -0.00000      -   4.6 2240s\n",
            " 2351691  7678   -0.00000   76    6          -   -0.00000      -   4.6 2245s\n",
            " 2357399  7673 infeasible   80               -   -0.00000      -   4.6 2250s\n",
            " 2362036  7666 infeasible   81               -   -0.00000      -   4.6 2255s\n",
            " 2367707  7654   -0.00000   76    2          -   -0.00000      -   4.6 2260s\n",
            " 2373327  7628 infeasible   76               -   -0.00000      -   4.6 2265s\n",
            " 2378020  7638 infeasible   75               -   -0.00000      -   4.6 2270s\n",
            " 2383756  7672 infeasible   76               -   -0.00000      -   4.6 2275s\n",
            " 2388375  7656   -0.00000   77    2          -   -0.00000      -   4.6 2280s\n",
            " 2394120  7695   -0.00000   78    2          -   -0.00000      -   4.6 2285s\n",
            " 2399714  7655 infeasible   77               -   -0.00000      -   4.6 2290s\n",
            " 2404462  7659   -0.00000   78    6          -   -0.00000      -   4.6 2295s\n",
            " 2410154  7649   -0.00000   75    6          -   -0.00000      -   4.6 2300s\n",
            " 2414848  7655   -0.00000   77    2          -   -0.00000      -   4.6 2305s\n",
            " 2420597  7692   -0.00000   75    6          -   -0.00000      -   4.6 2310s\n",
            " 2426223  7668 infeasible   79               -   -0.00000      -   4.6 2315s\n",
            " 2431014  7682   -0.00000   77    2          -   -0.00000      -   4.6 2320s\n",
            " 2436714  7653   -0.00000   77    6          -   -0.00000      -   4.6 2325s\n",
            " 2441428  7663   -0.00000   79    2          -   -0.00000      -   4.6 2330s\n",
            " 2447131  7633   -0.00000   77    6          -   -0.00000      -   4.6 2335s\n",
            " 2452859  7661   -0.00000   72    6          -   -0.00000      -   4.6 2340s\n",
            " 2457563  7626 infeasible   78               -   -0.00000      -   4.6 2345s\n",
            " 2463314  7668   -0.00000   78    6          -   -0.00000      -   4.6 2350s\n",
            " 2468067  7643   -0.00000   77    6          -   -0.00000      -   4.6 2355s\n",
            " 2473798  7611   -0.00000   79    4          -   -0.00000      -   4.6 2360s\n",
            " 2479527  7593   -0.00000   80    2          -   -0.00000      -   4.6 2365s\n",
            " 2484372  7625 infeasible   79               -   -0.00000      -   4.6 2370s\n",
            " 2490091  7601   -0.00000   77    2          -   -0.00000      -   4.6 2375s\n",
            " 2494867  7635 infeasible   78               -   -0.00000      -   4.6 2380s\n",
            " 2500597  7592   -0.00000   76    2          -   -0.00000      -   4.6 2385s\n",
            " 2506329  7623   -0.00000   80    2          -   -0.00000      -   4.6 2390s\n",
            " 2511162  7632 infeasible   78               -   -0.00000      -   4.6 2395s\n",
            " 2516919  7641   -0.00000   78    6          -   -0.00000      -   4.6 2400s\n",
            " 2521593  7621   -0.00000   77    2          -   -0.00000      -   4.6 2405s\n",
            " 2527341  7652 infeasible   77               -   -0.00000      -   4.6 2410s\n",
            " 2533072  7624 infeasible   80               -   -0.00000      -   4.6 2415s\n",
            " 2537846  7605   -0.00000   74    6          -   -0.00000      -   4.6 2420s\n",
            " 2543641  7637   -0.00000   79    6          -   -0.00000      -   4.6 2425s\n",
            " 2548352  7603 infeasible   77               -   -0.00000      -   4.6 2430s\n",
            " 2554055  7615   -0.00000   79    6          -   -0.00000      -   4.6 2435s\n",
            " 2559773  7635   -0.00000   80    2          -   -0.00000      -   4.6 2440s\n",
            " 2564539  7605 infeasible   80               -   -0.00000      -   4.6 2445s\n",
            " 2570266  7630   -0.00000   75    6          -   -0.00000      -   4.6 2450s\n",
            " 2575013  7612 infeasible   80               -   -0.00000      -   4.6 2455s\n",
            " 2580694  7609   -0.00000   77    2          -   -0.00000      -   4.6 2460s\n",
            " 2586368  7623 infeasible   79               -   -0.00000      -   4.6 2465s\n",
            " 2591117  7585 infeasible   79               -   -0.00000      -   4.6 2470s\n",
            " 2596865  7590   -0.00000   83    6          -   -0.00000      -   4.6 2475s\n",
            " 2601570  7607   -0.00000   78    2          -   -0.00000      -   4.6 2480s\n",
            " 2607291  7605 infeasible   80               -   -0.00000      -   4.6 2485s\n",
            " 2612977  7624   -0.00000   76    6          -   -0.00000      -   4.6 2490s\n",
            " 2617674  7620   -0.00000   78    2          -   -0.00000      -   4.6 2495s\n",
            " 2623444  7615   -0.00000   75    6          -   -0.00000      -   4.6 2500s\n",
            " 2628196  7622   -0.00000   75    6          -   -0.00000      -   4.6 2505s\n",
            " 2633913  7620   -0.00000   77    2          -   -0.00000      -   4.6 2510s\n",
            " 2639627  7607   -0.00000   79    6          -   -0.00000      -   4.6 2515s\n",
            " 2644383  7596 infeasible   81               -   -0.00000      -   4.6 2520s\n",
            " 2650093  7643   -0.00000   80    2          -   -0.00000      -   4.6 2525s\n",
            " 2654795  7638 infeasible   80               -   -0.00000      -   4.6 2530s\n",
            " 2660525  7667 infeasible   80               -   -0.00000      -   4.6 2535s\n",
            " 2666217  7659   -0.00000   76    2          -   -0.00000      -   4.6 2540s\n",
            " 2670960  7674   -0.00000   77    2          -   -0.00000      -   4.6 2545s\n",
            " 2676694  7647 infeasible   80               -   -0.00000      -   4.6 2550s\n",
            " 2681372  7653   -0.00000   73    6          -   -0.00000      -   4.6 2555s\n",
            " 2687080  7664   -0.00000   76    2          -   -0.00000      -   4.6 2560s\n",
            " 2692778  7646 infeasible   75               -   -0.00000      -   4.6 2565s\n",
            " 2697467  7645   -0.00000   77    6          -   -0.00000      -   4.6 2570s\n",
            " 2703172  7681   -0.00000   74    6          -   -0.00000      -   4.6 2575s\n",
            " 2707892  7715   -0.00000   79    6          -   -0.00000      -   4.6 2580s\n",
            " 2713592  7644 infeasible   80               -   -0.00000      -   4.6 2585s\n",
            " 2719300  7645 infeasible   79               -   -0.00000      -   4.6 2590s\n",
            " 2723992  7628   -0.00000   76    2          -   -0.00000      -   4.6 2595s\n",
            " 2729692  7666 infeasible   80               -   -0.00000      -   4.6 2600s\n",
            " 2734468  7673   -0.00000   79    2          -   -0.00000      -   4.6 2605s\n",
            " 2740184  7653   -0.00000   79    4          -   -0.00000      -   4.6 2610s\n",
            " 2745853  7656 infeasible   77               -   -0.00000      -   4.6 2615s\n",
            " 2750590  7649   -0.00000   76    2          -   -0.00000      -   4.6 2620s\n",
            " 2756300  7626 infeasible   78               -   -0.00000      -   4.6 2625s\n",
            " 2760992  7666   -0.00000   81    2          -   -0.00000      -   4.6 2630s\n",
            " 2766767  7670 infeasible   80               -   -0.00000      -   4.6 2635s\n",
            " 2772520  7649   -0.00000   83    2          -   -0.00000      -   4.6 2640s\n",
            " 2777271  7649   -0.00000   75    6          -   -0.00000      -   4.6 2645s\n",
            " 2783032  7652 infeasible   82               -   -0.00000      -   4.6 2650s\n",
            " 2787807  7653   -0.00000   79    6          -   -0.00000      -   4.6 2655s\n",
            " 2793586  7629   -0.00000   80    4          -   -0.00000      -   4.6 2660s\n",
            " 2799393  7650   -0.00000   73    6          -   -0.00000      -   4.6 2665s\n",
            " 2804149  7626   -0.00000   79    2          -   -0.00000      -   4.6 2670s\n",
            " 2809878  7641   -0.00000   78    2          -   -0.00000      -   4.6 2675s\n",
            " 2814640  7667   -0.00000   77    6          -   -0.00000      -   4.6 2680s\n",
            " 2820420  7661   -0.00000   80    2          -   -0.00000      -   4.6 2685s\n",
            " 2826116  7690   -0.00000   79    2          -   -0.00000      -   4.6 2690s\n",
            " 2830839  7675   -0.00000   76    6          -   -0.00000      -   4.6 2695s\n",
            " 2836589  7677 infeasible   78               -   -0.00000      -   4.6 2700s\n",
            " 2841297  7699 infeasible   76               -   -0.00000      -   4.6 2705s\n",
            " 2847053  7757   -0.00000   79    6          -   -0.00000      -   4.6 2710s\n",
            " 2852770  7666   -0.00000   78    2          -   -0.00000      -   4.6 2715s\n",
            " 2857523  7686 infeasible   76               -   -0.00000      -   4.6 2720s\n",
            " 2863239  7719   -0.00000   77    6          -   -0.00000      -   4.6 2725s\n",
            " 2867932  7682 infeasible   78               -   -0.00000      -   4.6 2730s\n",
            " 2873674  7717   -0.00000   77    2          -   -0.00000      -   4.6 2735s\n",
            " 2879397  7673 infeasible   78               -   -0.00000      -   4.6 2740s\n",
            " 2884161  7671   -0.00000   77    6          -   -0.00000      -   4.6 2745s\n",
            " 2889900  7707 infeasible   80               -   -0.00000      -   4.6 2750s\n",
            " 2894590  7647 infeasible   80               -   -0.00000      -   4.6 2755s\n",
            " 2900363  7677   -0.00000   78    2          -   -0.00000      -   4.6 2760s\n",
            " 2906067  7673   -0.00000   76    2          -   -0.00000      -   4.6 2765s\n",
            " 2910769  7633   -0.00000   77    6          -   -0.00000      -   4.6 2770s\n",
            " 2916506  7670 infeasible   76               -   -0.00000      -   4.6 2775s\n",
            " 2921200  7681 infeasible   79               -   -0.00000      -   4.6 2780s\n",
            " 2926906  7645 infeasible   79               -   -0.00000      -   4.6 2785s\n",
            " 2932645  7637 infeasible   80               -   -0.00000      -   4.6 2790s\n",
            " 2937325  7628   -0.00000   77    6          -   -0.00000      -   4.6 2795s\n",
            " 2943062  7650 infeasible   82               -   -0.00000      -   4.6 2800s\n",
            " 2947859  7645 infeasible   80               -   -0.00000      -   4.6 2805s\n",
            " 2953614  7641   -0.00000   81    6          -   -0.00000      -   4.6 2810s\n",
            " 2959359  7623 infeasible   80               -   -0.00000      -   4.6 2815s\n",
            " 2964108  7616 infeasible   80               -   -0.00000      -   4.6 2820s\n",
            " 2969882  7621 infeasible   81               -   -0.00000      -   4.6 2825s\n",
            " 2974602  7610 infeasible   80               -   -0.00000      -   4.6 2830s\n",
            " 2980386  7615   -0.00000   83    6          -   -0.00000      -   4.6 2835s\n",
            " 2986171  7648   -0.00000   81    2          -   -0.00000      -   4.6 2840s\n",
            " 2990873  7592   -0.00000   79    2          -   -0.00000      -   4.6 2845s\n",
            " 2996640  7621 infeasible   82               -   -0.00000      -   4.6 2850s\n",
            " 3001294  7588 infeasible   87               -   -0.00000      -   4.6 2855s\n",
            " 3006673  7557 infeasible   83               -   -0.00000      -   4.6 2860s\n",
            " 3012135  7566 infeasible   80               -   -0.00000      -   4.6 2865s\n",
            " 3016688  7565   -0.00000   75    6          -   -0.00000      -   4.6 2870s\n",
            " 3022159  7575 infeasible   82               -   -0.00000      -   4.6 2875s\n",
            " 3026744  7576 infeasible   80               -   -0.00000      -   4.6 2880s\n",
            " 3032155  7549 infeasible   78               -   -0.00000      -   4.6 2885s\n",
            " 3037604  7581   -0.00000   79    6          -   -0.00000      -   4.6 2890s\n",
            " 3042098  7574   -0.00000   79    6          -   -0.00000      -   4.6 2895s\n",
            " 3047483  7600 infeasible   81               -   -0.00000      -   4.6 2900s\n",
            " 3052056  7579 infeasible   79               -   -0.00000      -   4.6 2905s\n",
            " 3057395  7573   -0.00000   81    2          -   -0.00000      -   4.6 2910s\n",
            " 3062817  7587 infeasible   83               -   -0.00000      -   4.6 2915s\n",
            " 3067275  7570 infeasible   79               -   -0.00000      -   4.6 2920s\n",
            " 3072787  7565 infeasible   77               -   -0.00000      -   4.6 2925s\n",
            " 3077272  7625 infeasible   84               -   -0.00000      -   4.6 2930s\n",
            " 3082634  7593 infeasible   80               -   -0.00000      -   4.6 2935s\n",
            " 3088114  7569 infeasible   86               -   -0.00000      -   4.6 2940s\n",
            " 3092555  7558   -0.00000   77    6          -   -0.00000      -   4.6 2945s\n",
            " 3097951  7571   -0.00000   74    6          -   -0.00000      -   4.6 2950s\n",
            " 3102516  7570 infeasible   86               -   -0.00000      -   4.6 2955s\n",
            " 3107880  7577 infeasible   85               -   -0.00000      -   4.6 2960s\n",
            " 3113368  7536   -0.00000   83    6          -   -0.00000      -   4.6 2965s\n",
            " 3117902  7588 infeasible   81               -   -0.00000      -   4.6 2970s\n",
            " 3123226  7587   -0.00000   84    4          -   -0.00000      -   4.6 2975s\n",
            " 3127779  7602 infeasible   79               -   -0.00000      -   4.6 2980s\n",
            " 3133076  7619   -0.00000   79    6          -   -0.00000      -   4.6 2985s\n",
            " 3138530  7565   -0.00000   81    4          -   -0.00000      -   4.6 2990s\n",
            " 3142940  7558 infeasible   80               -   -0.00000      -   4.6 2995s\n",
            " 3148417  7575   -0.00000   73    6          -   -0.00000      -   4.6 3000s\n",
            " 3152963  7599   -0.00000   78    2          -   -0.00000      -   4.6 3005s\n",
            " 3158244  7576 infeasible   82               -   -0.00000      -   4.6 3010s\n",
            " 3163764  7584   -0.00000   78    2          -   -0.00000      -   4.6 3015s\n",
            " 3168275  7595 infeasible   82               -   -0.00000      -   4.6 3020s\n",
            " 3173743  7546   -0.00000   82    4          -   -0.00000      -   4.6 3025s\n",
            " 3178439  7561 infeasible   86               -   -0.00000      -   4.6 3030s\n",
            " 3183741  7573 infeasible   81               -   -0.00000      -   4.6 3035s\n",
            " 3189237  7548 infeasible   86               -   -0.00000      -   4.6 3040s\n",
            " 3193776  7545   -0.00000   80    2          -   -0.00000      -   4.6 3045s\n",
            " 3199270  7535   -0.00000   77    6          -   -0.00000      -   4.6 3050s\n",
            " 3203919  7573   -0.00000   78    6          -   -0.00000      -   4.6 3055s\n",
            " 3209322  7588   -0.00000   81    4          -   -0.00000      -   4.6 3060s\n",
            " 3214807  7583   -0.00000   82    6          -   -0.00000      -   4.6 3065s\n",
            " 3219289  7545   -0.00000   76    2          -   -0.00000      -   4.6 3070s\n",
            " 3224779  7561   -0.00000   75    6          -   -0.00000      -   4.6 3075s\n",
            " 3229431  7587   -0.00000   81    6          -   -0.00000      -   4.6 3080s\n",
            " 3234768  7575   -0.00000   79    4          -   -0.00000      -   4.6 3085s\n",
            " 3240243  7556 infeasible   86               -   -0.00000      -   4.6 3090s\n",
            " 3244670  7556 infeasible   79               -   -0.00000      -   4.6 3095s\n",
            " 3250109  7550   -0.00000   78    6          -   -0.00000      -   4.6 3100s\n",
            " 3254747  7554   -0.00000   76    6          -   -0.00000      -   4.6 3105s\n",
            " 3260124  7579 infeasible   85               -   -0.00000      -   4.6 3110s\n",
            " 3265596  7544   -0.00000   78    2          -   -0.00000      -   4.6 3115s\n",
            " 3270115  7529 infeasible   83               -   -0.00000      -   4.6 3120s\n",
            " 3275615  7562 infeasible   87               -   -0.00000      -   4.6 3125s\n",
            " 3280299  7577 infeasible   84               -   -0.00000      -   4.6 3130s\n",
            " 3285727  7606   -0.00000   81    2          -   -0.00000      -   4.6 3135s\n",
            " 3291273  7572 infeasible   89               -   -0.00000      -   4.6 3140s\n",
            " 3295854  7560 infeasible   81               -   -0.00000      -   4.6 3145s\n",
            " 3301453  7590 infeasible   84               -   -0.00000      -   4.6 3150s\n",
            " 3306133  7602   -0.00000   84    6          -   -0.00000      -   4.6 3155s\n",
            " 3311505  7600 infeasible   82               -   -0.00000      -   4.6 3160s\n",
            " 3317102  7615   -0.00000   84    2          -   -0.00000      -   4.6 3165s\n",
            " 3321729  7737   -0.00000   84    2          -   -0.00000      -   4.6 3170s\n",
            " 3327279  7780 infeasible   85               -   -0.00000      -   4.6 3175s\n",
            " 3331961  7704   -0.00000   85    2          -   -0.00000      -   4.6 3180s\n",
            " 3337285  7609   -0.00000   80    2          -   -0.00000      -   4.6 3185s\n",
            " 3342845  7568   -0.00000   81    2          -   -0.00000      -   4.7 3190s\n",
            " 3347468  7595   -0.00000   86    2          -   -0.00000      -   4.7 3195s\n",
            " 3353017  7554   -0.00000   84    2          -   -0.00000      -   4.7 3200s\n",
            " 3357806  7601   -0.00000   82    4          -   -0.00000      -   4.7 3205s\n",
            " 3363195  7569 infeasible   81               -   -0.00000      -   4.7 3210s\n",
            " 3368773  7592   -0.00000   85    4          -   -0.00000      -   4.7 3215s\n",
            " 3373315  7569 infeasible   87               -   -0.00000      -   4.7 3220s\n",
            " 3378886  7563 infeasible   84               -   -0.00000      -   4.7 3225s\n",
            " 3383595  7572 infeasible   84               -   -0.00000      -   4.7 3230s\n",
            " 3388977  7549   -0.00000   84    2          -   -0.00000      -   4.7 3235s\n",
            " 3394525  7595   -0.00000   83    6          -   -0.00000      -   4.7 3240s\n",
            " 3399047  7580   -0.00000   88    2          -   -0.00000      -   4.7 3245s\n",
            " 3404558  7593 infeasible   87               -   -0.00000      -   4.7 3250s\n",
            " 3409264  7580 infeasible   86               -   -0.00000      -   4.7 3255s\n",
            " 3414645  7533 infeasible   84               -   -0.00000      -   4.7 3260s\n",
            " 3420198  7529   -0.00000   84    4          -   -0.00000      -   4.7 3265s\n",
            " 3424770  7554 infeasible   83               -   -0.00000      -   4.7 3270s\n",
            " 3430246  7549   -0.00000   82    6          -   -0.00000      -   4.7 3275s\n",
            " 3434930  7549 infeasible   88               -   -0.00000      -   4.7 3280s\n",
            " 3440336  7580   -0.00000   86    6          -   -0.00000      -   4.7 3285s\n",
            " 3445816  7497   -0.00000   79    2          -   -0.00000      -   4.7 3290s\n",
            " 3450412  7533   -0.00000   83    4          -   -0.00000      -   4.7 3295s\n",
            " 3455968  7543   -0.00000   83    2          -   -0.00000      -   4.7 3300s\n",
            " 3460562  7537   -0.00000   77    2          -   -0.00000      -   4.7 3305s\n",
            " 3465950  7518 infeasible   85               -   -0.00000      -   4.7 3310s\n",
            " 3471494  7550 infeasible   86               -   -0.00000      -   4.7 3315s\n",
            " 3476043  7539   -0.00000   79    2          -   -0.00000      -   4.7 3320s\n",
            " 3481546  7510   -0.00000   80    6          -   -0.00000      -   4.7 3325s\n",
            " 3486188  7516   -0.00000   81    2          -   -0.00000      -   4.7 3330s\n",
            " 3491618  7559 infeasible   84               -   -0.00000      -   4.7 3335s\n",
            " 3497108  7527 infeasible   86               -   -0.00000      -   4.7 3340s\n",
            " 3501648  7558 infeasible   81               -   -0.00000      -   4.7 3345s\n",
            " 3507159  7569   -0.00000   79    6          -   -0.00000      -   4.7 3350s\n",
            " 3511776  7561 infeasible   84               -   -0.00000      -   4.7 3355s\n",
            " 3517269  7516   -0.00000   78    6          -   -0.00000      -   4.7 3360s\n",
            " 3522808  7554   -0.00000   79    6          -   -0.00000      -   4.7 3365s\n",
            " 3527346  7565   -0.00000   84    6          -   -0.00000      -   4.7 3370s\n",
            " 3532849  7540   -0.00000   84    4          -   -0.00000      -   4.7 3375s\n",
            " 3537436  7568   -0.00000   83    2          -   -0.00000      -   4.7 3380s\n",
            " 3542918  7544   -0.00000   83    2          -   -0.00000      -   4.7 3385s\n",
            " 3548430  7536 infeasible   86               -   -0.00000      -   4.7 3390s\n",
            " 3552887  7519   -0.00000   81    4          -   -0.00000      -   4.7 3395s\n",
            " 3558361  7549 infeasible   84               -   -0.00000      -   4.7 3400s\n",
            " 3562922  7564   -0.00000   83    2          -   -0.00000      -   4.7 3405s\n",
            " 3568356  7548 infeasible   84               -   -0.00000      -   4.7 3410s\n",
            " 3573887  7558 infeasible   86               -   -0.00000      -   4.7 3415s\n",
            " 3578349  7536   -0.00000   79    2          -   -0.00000      -   4.7 3420s\n",
            " 3583835  7575 infeasible   90               -   -0.00000      -   4.7 3425s\n",
            " 3588449  7578 infeasible   86               -   -0.00000      -   4.7 3430s\n",
            " 3593964  7585   -0.00000   80    6          -   -0.00000      -   4.7 3435s\n",
            " 3599503  7576   -0.00000   83    4          -   -0.00000      -   4.7 3440s\n",
            " 3604044  7559   -0.00000   85    2          -   -0.00000      -   4.7 3445s\n",
            " 3609607  7593 infeasible   88               -   -0.00000      -   4.7 3450s\n",
            " 3614247  7586   -0.00000   79    6          -   -0.00000      -   4.7 3455s\n",
            " 3619723  7551 infeasible   85               -   -0.00000      -   4.7 3460s\n",
            " 3625288  7573 infeasible   84               -   -0.00000      -   4.7 3465s\n",
            " 3629835  7593 infeasible   84               -   -0.00000      -   4.7 3470s\n",
            " 3635410  7558 infeasible   90               -   -0.00000      -   4.7 3475s\n",
            " 3640061  7524   -0.00000   86    2          -   -0.00000      -   4.7 3480s\n",
            " 3645520  7522   -0.00000   80    6          -   -0.00000      -   4.7 3485s\n",
            " 3651033  7525 infeasible   80               -   -0.00000      -   4.7 3490s\n",
            " 3655603  7515 infeasible   83               -   -0.00000      -   4.7 3495s\n",
            " 3661128  7570 infeasible   86               -   -0.00000      -   4.7 3500s\n",
            " 3665728  7512 infeasible   84               -   -0.00000      -   4.7 3505s\n",
            " 3671199  7542   -0.00000   83    2          -   -0.00000      -   4.7 3510s\n",
            " 3676687  7543   -0.00000   78    6          -   -0.00000      -   4.7 3515s\n",
            " 3681194  7505 infeasible   82               -   -0.00000      -   4.7 3520s\n",
            " 3686690  7538   -0.00000   84    6          -   -0.00000      -   4.7 3525s\n",
            " 3691287  7523 infeasible   88               -   -0.00000      -   4.7 3530s\n",
            " 3696757  7559 infeasible   80               -   -0.00000      -   4.7 3535s\n",
            " 3702270  7571   -0.00000   79    6          -   -0.00000      -   4.7 3540s\n",
            " 3706778  7559   -0.00000   83    2          -   -0.00000      -   4.7 3545s\n",
            " 3712336  7590 infeasible   84               -   -0.00000      -   4.7 3550s\n",
            " 3716950  7566 infeasible   84               -   -0.00000      -   4.7 3555s\n",
            " 3722448  7548 infeasible   79               -   -0.00000      -   4.7 3560s\n",
            " 3728008  7571 infeasible   80               -   -0.00000      -   4.7 3565s\n",
            " 3732494  7562   -0.00000   80    4          -   -0.00000      -   4.7 3570s\n",
            " 3737956  7567 infeasible   82               -   -0.00000      -   4.7 3575s\n",
            " 3742496  7554 infeasible   84               -   -0.00000      -   4.7 3580s\n",
            " 3747932  7567 infeasible   86               -   -0.00000      -   4.7 3585s\n",
            " 3753442  7570   -0.00000   80    4          -   -0.00000      -   4.7 3590s\n",
            " 3757943  7591   -0.00000   78    6          -   -0.00000      -   4.7 3595s\n",
            " 3763461  7597   -0.00000   81    2          -   -0.00000      -   4.7 3600s\n"
          ]
        }
      ],
      "source": [
        "import gurobipy as gp\n",
        "from gurobipy import GRB\n",
        "\n",
        "# ========================================================\n",
        "# Data\n",
        "# ========================================================\n",
        "# Points: each is [x, y, value]\n",
        "crystals = [\n",
        "    [10, 20, 100],\n",
        "    [40, 50, 150],\n",
        "    [25, 35, 200],\n",
        "    [50, 50, 300]\n",
        "]\n",
        "mines = [\n",
        "    [15, 25, 50],\n",
        "    [70, 60, 75],\n",
        "    [30, 200, 60]\n",
        "]\n",
        "n_crystals = len(crystals)\n",
        "n_mines = len(mines)\n",
        "\n",
        "# ========================================================\n",
        "# Model Parameters\n",
        "# ========================================================\n",
        "n_vertices = 8             # Reduced number of vertices for better convergence\n",
        "big_M = 100000            # Increased Big-M constant\n",
        "M_sep = 100000            # Increased separation constant\n",
        "delta = 5.0               # Reduced minimum edge length\n",
        "epsilon_convex = 1e-6     # Reduced epsilon for numerical stability\n",
        "\n",
        "# Calculate center point based on data points\n",
        "center_x = sum(p[0] for p in crystals + mines) / (n_crystals + n_mines)\n",
        "center_y = sum(p[1] for p in crystals + mines) / (n_crystals + n_mines)\n",
        "\n",
        "# ========================================================\n",
        "# Create the Model\n",
        "# ========================================================\n",
        "params={\n",
        "    \"WLSACCESSID\":'56123837-1b14-432c-b974-a9bb029df73e',\n",
        "    \"WLSSECRET\":'ee7e4faf-676f-472b-b2f8-a196087f18d5',\n",
        "    \"LICENSEID\":2616884\n",
        "}\n",
        "env=gp.Env(params=params)\n",
        "model=gp.Model(env=env)\n",
        "\n",
        "epsilon=1e-5\n",
        "\n",
        "# Add MIPFocus parameter to emphasize finding feasible solutions\n",
        "model.setParam('MIPFocus', 1)\n",
        "model.setParam('NumericFocus', 3)  # Increase numeric focus for better stability\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (A) Polygon Variables\n",
        "# --------------------------------------------------\n",
        "# Vertex coordinates (continuous)\n",
        "x = model.addVars(n_vertices, lb=0, ub=10000.0, name=\"x\")\n",
        "y = model.addVars(n_vertices, lb=0, ub=10000.0, name=\"y\")\n",
        "\n",
        "# Binary variables for edge orientation\n",
        "b = model.addVars(n_vertices, vtype=GRB.BINARY, name=\"b\")\n",
        "d = model.addVars(n_vertices, vtype=GRB.BINARY, name=\"d\")\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (B) Enforce Alternating Edge Orientation\n",
        "# --------------------------------------------------\n",
        "for i in range(n_vertices):\n",
        "    model.addConstr(b[i] + b[(i+1) % n_vertices] == 1, name=f\"alternating_{i}\")\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (C) Edge Non-Degeneracy and Minimum Length Constraints\n",
        "# --------------------------------------------------\n",
        "for i in range(n_vertices):\n",
        "    i_next = (i + 1) % n_vertices\n",
        "\n",
        "    # Horizontal/vertical constraints\n",
        "    model.addConstr(y[i] - y[i_next] <= big_M * (1 - b[i]), name=f\"hor_y_upper_{i}\")\n",
        "    model.addConstr(y[i] - y[i_next] >= -big_M * (1 - b[i]), name=f\"hor_y_lower_{i}\")\n",
        "    model.addConstr(x[i] - x[i_next] <= big_M * b[i], name=f\"ver_x_upper_{i}\")\n",
        "    model.addConstr(x[i] - x[i_next] >= -big_M * b[i], name=f\"ver_x_lower_{i}\")\n",
        "\n",
        "    # Minimum length constraints with direction\n",
        "    model.addConstr(x[i_next] - x[i] >= delta - big_M*(1 - d[i]) - big_M*(1 - b[i]))\n",
        "    model.addConstr(x[i] - x[i_next] >= delta - big_M*d[i] - big_M*(1 - b[i]))\n",
        "    model.addConstr(y[i_next] - y[i] >= delta - big_M*(1 - d[i]) - big_M*b[i])\n",
        "    model.addConstr(y[i] - y[i_next] >= delta - big_M*d[i] - big_M*b[i])\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (D) Non-Intersection Constraints\n",
        "# --------------------------------------------------\n",
        "M=1e6\n",
        "for i in range(n_vertices):\n",
        "  for j in range(i+2,n_vertices):\n",
        "    if((i%2)!=(j%2)):\n",
        "      i_next=(i+1)%n_vertices\n",
        "      j_next=(j+1)%n_vertices\n",
        "\n",
        "      # When b==1, enforce constraint1\n",
        "\n",
        "      #b==1 indicates that i edge is horizontal constraint 1\n",
        "      i_hor_sum = model.addVar(vtype=GRB.INTEGER,name=f\"i_hor_sum{i}_{j}\")\n",
        "\n",
        "      xi_hor_min=model.addVar()\n",
        "      xi_hor_max=model.addVar()\n",
        "      model.addGenConstrMin(xi_hor_min, [x[i], x[i_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(xi_hor_max, [x[i], x[i_next]], name=\"max_constraint\")\n",
        "\n",
        "      yj_ver_min=model.addVar()\n",
        "      yj_ver_max=model.addVar()\n",
        "      model.addGenConstrMin(yj_ver_min, [y[j], y[j_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(yj_ver_max, [y[j], y[j_next]], name=\"max_constraint\")\n",
        "\n",
        "      hor1=model.addVar(vtype=GRB.BINARY)\n",
        "      hor2=model.addVar(vtype=GRB.BINARY)\n",
        "      hor3=model.addVar(vtype=GRB.BINARY)\n",
        "      hor4=model.addVar(vtype=GRB.BINARY)\n",
        "\n",
        "      model.addGenConstrIndicator(hor1,1,x[j]>=epsilon+xi_hor_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor2,1,x[j]<=xi_hor_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor3,1,y[i]>=epsilon+yj_ver_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(hor4,1,y[i]<=yj_ver_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "      model.addConstr(i_hor_sum==hor1+hor2+hor3+hor4)\n",
        "\n",
        "      model.addGenConstrIndicator(b[i],1,i_hor_sum>=1, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "      i_ver_sum = model.addVar(vtype=GRB.INTEGER,name=f\"i_hor_sum{i}_{j}\")\n",
        "\n",
        "      yi_ver_min=model.addVar()\n",
        "      yi_ver_max=model.addVar()\n",
        "      model.addGenConstrMin(yi_ver_min, [y[i], y[i_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(yi_ver_max, [y[i], y[i_next]], name=\"max_constraint\")\n",
        "\n",
        "      xj_hor_min=model.addVar()\n",
        "      xj_hor_max=model.addVar()\n",
        "      model.addGenConstrMin(xj_hor_min, [x[j], x[j_next]], name=\"min_constraint\")\n",
        "      model.addGenConstrMax(xj_hor_max, [x[j], x[j_next]], name=\"max_constraint\")\n",
        "\n",
        "      ver1=model.addVar(vtype=GRB.BINARY)\n",
        "      ver2=model.addVar(vtype=GRB.BINARY)\n",
        "      ver3=model.addVar(vtype=GRB.BINARY)\n",
        "      ver4=model.addVar(vtype=GRB.BINARY)\n",
        "\n",
        "      model.addGenConstrIndicator(ver1,1,x[i]<=xj_hor_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver2,1,x[i]>=epsilon+xj_hor_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver3,1,y[j]>=epsilon+yi_ver_max, name=f\"if_case{i}_{j}\")\n",
        "      model.addGenConstrIndicator(ver4,1,y[j]<=yi_ver_min-epsilon, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "      model.addConstr(i_ver_sum==ver1+ver2+ver3+ver4)\n",
        "      model.addGenConstrIndicator(b[i],0,i_ver_sum>=1, name=f\"if_case{i}_{j}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (E) Point-Inclusion Constraints (Cross Product Method)\n",
        "# --------------------------------------------------\n",
        "inside_vars = []\n",
        "for p, (xp, yp, _) in enumerate(crystals + mines):\n",
        "    inside = model.addVar(vtype=GRB.BINARY, name=f\"inside_{p}\")\n",
        "    inside_vars.append(inside)\n",
        "    cross_vars = model.addVars(n_vertices, vtype=GRB.BINARY, name=f\"cross_{p}\")\n",
        "\n",
        "    for i in range(n_vertices):\n",
        "        i_next = (i + 1) % n_vertices\n",
        "        cross_expr = (x[i_next] - x[i]) * (yp - y[i]) - (y[i_next] - y[i]) * (xp - x[i])\n",
        "        model.addConstr(cross_expr >= -epsilon_convex - big_M * (1 - cross_vars[i]))\n",
        "        model.addConstr(cross_expr <= epsilon_convex + big_M * (1 - cross_vars[i]))\n",
        "\n",
        "    model.addConstr(inside <= gp.quicksum(cross_vars[i] for i in range(n_vertices)))\n",
        "    model.addConstr(inside >= gp.quicksum(cross_vars[i] for i in range(n_vertices)) - n_vertices + 1)\n",
        "\n",
        "# --------------------------------------------------\n",
        "# (F) Objective\n",
        "# --------------------------------------------------\n",
        "objective_expr = gp.quicksum(crystals[p][2] * inside_vars[p] for p in range(n_crystals)) \\\n",
        "               - gp.quicksum(mines[p][2] * inside_vars[p + n_crystals] for p in range(n_mines))\n",
        "model.setObjective(0, GRB.MAXIMIZE)\n",
        "\n",
        "# --------------------------------------------------\n",
        "# Solve the Model\n",
        "# --------------------------------------------------\n",
        "model.update()\n",
        "model.optimize()\n",
        "\n",
        "# --------------------------------------------------\n",
        "# Report Results\n",
        "# --------------------------------------------------\n",
        "if model.status == GRB.OPTIMAL:\n",
        "    print(\"\\nOptimal Polygon Vertex Coordinates:\")\n",
        "    for i in range(n_vertices):\n",
        "        print(f\" Vertex {i}: (x = {x[i].X}, y = {y[i].X})\")\n",
        "    print(\"\\nTotal Score =\", model.ObjVal)\n",
        "else:\n",
        "    print(f\"Optimization ended with status {model.status}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vuysk5WkPik0"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMaglccVApI0fHJL1f2pBIp",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}